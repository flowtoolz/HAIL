DM: direct manipulation effectively promotes flow through articulatory directness, semantic directness and engagement, and it is especially related to flow in the way it emerges best from a limited, task oriented context. DM requires the interface to represent the task in the way the user thinks about the domain. but what a user can think about is limited by his working memory. he only thinks about the subset of the domain that is relevant for his current task. domain subset, corresponding task and metaphor together form a context. this context is what DM at its core is all about and what is often meant with the word "domain". within an application, context switches are often inevitable, just like it is inevitable for any creative mind to do administrative tasks and have breaks in between highly productive flow sessions. these switches and breaks do no harm to flow or direct manipulation. in fact, in the sense of the abstract principles of DM, there is no distinction between switching the application and switching the context within an application. since windows and search functions are ways to have multiple contexts they are not only contrary to flow but also hard to align with the direct manipulation principles. the question whether an application is mixed mode or truly conforms to DM is irrelevant, since "application" is an arbitrary scope that is unrelated to the scope of any context. what might be important though is that whenever we narrow the scope down to the context the user currently has in mind, we can easily imagine a direct manipulation interface for this context alone. now, if we want to support the user getting into the flow state, strict focus on the context of his creative task  becomes a necessity. for example, programs for novelists can go to full screen and hide all unnecessary options and interface elements in order to enable what is essentially the flow state. in this mode, only the direct manipulation aspect of the application is visible, while menu options, search function and other contexts are hidden. so flow and direct manipulation are deeply connected concepts. we conjecture that supporting flow is the innate, implicit purpose of direct manipulation.

question to think about: what is the typical scope of a task that is done in flow? what scope suits flow best? it must be narrow to let the user be in the moment, focused and productive. but it's also broad enough so that it still brings challenge. the optimal scope of the flow task would be enormously informative about what the scope of the context and its interface should be.